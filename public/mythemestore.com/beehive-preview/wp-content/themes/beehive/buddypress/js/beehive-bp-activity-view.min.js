"use strict";
! function(t) {
    let i = t("body.beehive");
    if (i.hasClass("activity") || i.hasClass("group-home")) {
        let e = t("#bp-nouveau-activity-form"),
            a = t("#rtmedia-add-media-button-post-update"),
            s = t("#activity-stream"),
            n = s[0];
        e.on("click", function() {
            let i = t(this).find("#whats-new"),
                e = beehive_data.activity_max;
            i.attr("maxlength", e), i.on("keyup", function() {
                t("#bp-nouveau-activity-form .char-count").length || t(this).after('<span class="char-count mute"></span>');
                let i = t("#bp-nouveau-activity-form .char-count"),
                    a = t(this).val().length;
                i.text(e - a)
            })
        }), a.length && a.append('<span class="button-text">' + beehive_data.attachment_text + "</span>");
        let r = new MutationObserver((t, i) => {
            for (let e of t)
                if ("childList" == e.type && e.addedNodes.length) {
                    for (let a of e.addedNodes)
                        if (1 == a.nodeType) {
                            if (a.classList.contains("activity-list"))
                                for (let s of a.children) s.classList.contains("activity-item") && (c(), d(), l());
                            a.classList.contains("activity-item") && (c(), d(), l())
                        }
                }
        });

        function d() {
            t("li.activity_update, li.rtmedia_update, li.activity_share").each(function() {
                if (!t(this).hasClass("text-rendered")) {
                    if (t(this).hasClass("activity_share")) {
                        let i = t(this).find(".activity-inner .activity-inner"),
                            e = i.find(".rtmedia-activity-container"),
                            a = e.find(".rtmedia-activity-text");
                        e.length || a.length ? a.addClass("activity-inner-text") : i.wrapInner('<div class="activity-inner-text"></div>');
                        let s = t(this).find(".activity-inner-text"),
                            n = s.find(".jetpack-video-wrapper");
                        s.find(".jetpack-video-wrapper").remove(), s.length && s.shorten({
                            showChars: 230,
                            moreText: beehive_data.read_more.toLowerCase(),
                            lessText: beehive_data.read_close
                        }), n.appendTo(s)
                    } else {
                        let r = t(this).find(".activity-inner"),
                            d = r.find(".rtmedia-activity-container"),
                            l = d.find(".rtmedia-activity-text");
                        d.length || l.length ? l.addClass("activity-inner-text") : r.wrapInner('<div class="activity-inner-text"></div>');
                        let c = t(this).find(".activity-inner-text"),
                            o = c.find(".jetpack-video-wrapper");
                        c.find(".jetpack-video-wrapper").remove(), c.length && c.shorten({
                            showChars: 230,
                            moreText: beehive_data.read_more.toLowerCase(),
                            lessText: beehive_data.read_close
                        }), o.appendTo(c)
                    }
                    t(this).addClass("text-rendered")
                }
            })
        }

        function l() {
            t(".activity-item .rtm-activity-media-list").each(function() {
                if (!t(this).hasClass("rtm-activity-list-rendered")) {
                    if (1 == beehive_data.rtm_is_masonry) {
                        if (t(this).hasClass("rtm-activity-video-list") || t(this).hasClass("rtm-activity-mixed-list")) {
                            let i = t(this).find(".rtmedia-list-item video");
                            i.each(function() {
                                t(this).attr("preload", !0)
                            }), t(this).addClass("rtm-activity-list-rendered")
                        }
                    } else if (t(this).hasClass("rtm-activity-photo-list")) {
                        if (t(this).children().length > 4) {
                            let e = t(this).find(".rtmedia-list-item");
                            e.filter(function(t) {
                                return t + 1 == 4
                            }).addClass("more").end().filter(function(t) {
                                return t + 1 > 4
                            }).hide(), t(this).addClass("rtm-activity-list-rendered")
                        }
                    } else if (t(this).hasClass("rtm-activity-video-list") || t(this).hasClass("rtm-activity-music-list") || t(this).hasClass("rtm-activity-mixed-list")) {
                        if (t(this).children().length > 1) {
                            let a = t(this).find(".rtmedia-list-item video");
                            a.each(function() {
                                t(this).attr("preload", !0)
                            }), t(this).wrap('<div class="rtm-activity-slider-container"></div>'), t(this).addClass("swiper-wrapper"), t(this).find(".rtmedia-list-item").addClass("swiper-slide"), t(this).after('<div class="swiper-pagination"></div>'), new Swiper(".rtm-activity-slider-container", {
                                pagination: {
                                    el: ".swiper-pagination",
                                    clickable: !0
                                }
                            }), t(this).addClass("rtm-activity-list-rendered")
                        } else {
                            let s = t(this).find(".rtmedia-list-item video");
                            s.each(function() {
                                t(this).attr("preload", !0)
                            }), t(this).addClass("rtm-activity-list-rendered")
                        }
                    }
                }
            })
        }

        function c() {
            let i = t("li.activity_update, li.rtmedia_update");
            i.each(function() {
                if (t(this).hasClass("url-preview-rendered")) return;
                let i = t(this).find(".rtmp_final_link");
                i.length && (i.find("iframe").length && i.addClass("has-iframe"), i.insertAfter(t(this).find(".activity-header")), t(this).addClass("url-preview-rendered"))
            })
        }
        n && (t(".activity-item", n).length && (d(), l()), r.observe(n, {
            childList: !0,
            subtree: !0
        }))
    }
    if (i.hasClass("beehive-media")) {
        let o = t(".rtmedia-uploader-div");
        o.length || t(window).scroll(function() {
            let i = t(".rtmedia_gallery_wrapper"),
                e = i.find(".rtm-load-more a.show-it");
            if (e.length && "block" == e.css("display")) {
                let a = e.offset(),
                    s = a.top - 50;
                t(window).scrollTop() + t(window).height() > s && e.trigger("click")
            }
        })
    }
    if (beehive_data.rtm_is_masonry) {
        let h = null;
        jQuery(document).ajaxComplete(function(i, e, a) {
            var s = get_parameter("action", a.data);
            ("activity_filter" === s || "post_update" === s || "get_single_activity_content" === s || "activity_get_older_updates" === s) && "undefined" != typeof rtmedia_masonry_layout && "true" == rtmedia_masonry_layout && "undefined" != typeof rtmedia_masonry_layout_activity && "true" == rtmedia_masonry_layout_activity && (t("#activity-stream .rtmedia-activity-container .rtmedia-list img").off("load"), h && clearTimeout(h), h = setTimeout(() => {
                let i = null;
                t("#activity-stream .rtmedia-activity-container .rtmedia-list img").on("load", function() {
                    i && clearTimeout(i), i = setTimeout(() => {
                        rtmedia_activity_masonry()
                    }, 1e3)
                })
            }, 1e3))
        })
    }
}(jQuery);